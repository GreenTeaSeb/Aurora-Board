use actix_files as fs;
use actix_web::{web, App, HttpRequest, HttpServer, Responder};
use sailfish::TemplateOnce;
#[macro_use]
extern crate log;

#[derive(TemplateOnce)]
#[template(path = "home.stpl")]
struct Images {
    messages: Vec<String>,
}

async fn search(req: HttpRequest) -> impl Responder {
    let params = req.match_info().get("name").unwrap_or("World!");
    format!("You searched for {}", params)
}

#[actix_web::main]
async fn main() -> std::io::Result<()> {
    env_logger::init();

    let ip_addr = ("0.0.0.0", 8080);
    info!("Starting server at: {}:{}", ip_addr.0, ip_addr.1);

    HttpServer::new(|| {
        App::new()
            .route("/search", web::get().to(search))
            .route("/search/{name}", web::get().to(search))
            .route("/home", web::route())
            .service(fs::Files::new("/css", "./css/").show_files_listing())
            .default_service(
                fs::Files::new("/home", "./static/")
                    .index_file("index.html")
                    .show_files_listing(),
            )
    })
    .bind(ip_addr)?
    .run()
    .await
}
